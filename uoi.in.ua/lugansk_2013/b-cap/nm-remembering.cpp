#define maxn 1000

#include <stdio.h>

int n, m, i, j;
int i1, j1, i2, j2; // Координати початкової та цільової клітин
int a[maxn][maxn];  // Комірки масиву міститимуть -2 для порожніх клітинок та довжину найкоротшого шляху з початкової клітинки для зафарбованих клітинок (-1 для зафарбованих клітинок, куди ми поки не змогли потрапити)
int q_i[maxn * maxn], q_j[maxn * maxn]; // Координати клітин у черзі пошуку в ширину
int q_cnt, q_cur, cur_i, cur_j, cur_step;
bool rows[maxn], cols[maxn];    // Індикатори того, які рядки і стовпчики вже було розглянуто
char c;

int main()
{
    freopen("cap.dat", "r", stdin);
    freopen("cap.sol", "w", stdout);

    /* Зчитування: */
    scanf("%d %d\n", &n, &m);
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            scanf("%c", &c);
            switch (c)
            {
                case '.':
                    a[i][j] = -2;   // Порожня клітинка
                    break;
                case 'x':
                    a[i][j] = -1;   // Зафарбована клітинка
                    break;
                case 'o':
                    a[i][j] = 0;    // Початкова зафарбована клітинка
                    i1 = i; // Запам’ятовуємо її координати
                    j1 = j;
                    break;
                case '+':
                    a[i][j] = -1;   // Зафарбована клітинка
                    i2 = i; // Запам’ятовуємо координати цільової клітинки
                    j2 = j;
                    break;
            }
        }
        scanf("\n");
    }
    /* Кінець зчитування */

    /* Ініціалізація індикаторів розглянутих рядків і стовпчиків */
    for (i = 0; i < n; i++)
        rows[i] = false;
    for (j = 0; j < m; j++)
        cols[j] = false;
    /* Кінець ініціалізації індикаторів */

    q_cnt = 1;  // Спершу в черзі буде єдина клітинка — початкова
    q_i[0] = i1;
    q_j[0] = j1;
    q_cur = 0;  // Ініціалізація лічильника розглядуваного елемента

    while (q_cur < q_cnt && a[i2][j2] == -1)    // Поки в черзі є елементи і ми ще не дійшли до цільової клітини
    {
        cur_i = q_i[q_cur]; // Координати поточної розглядуваної клітини
        cur_j = q_j[q_cur];
        cur_step = a[cur_i][cur_j] + 1; // Кількість ходів, за яку можна потрапити у наступну клітину
        if (! cols[cur_j])  // Якщо стовпчик, у якому стоїть поточна клітина, не було розглянуто раніше
        {
            cols[cur_j] = true; // Помічаємо стовпчик як розглянутий
            for (i = 0; i < n; i++) // Для всіх рядків
                if (a[i][cur_j] == -1)  // Якщо у даному рядку даного стовпчика — ще не пройдена зафарбована клітина
                {
                    a[i][cur_j] = cur_step; // Записуємо довжину шляху до клітини
                    q_i[q_cnt] = i; // Та додаємо її до черги
                    q_j[q_cnt] = cur_j;
                    q_cnt++;
                }
        }
        if (! rows[cur_i])  // Якщо рядок, у якому стоїть поточна клітина, не було розглянуто раніше
        {
            rows[cur_i] = true; // Помічаємо рядок як розглянутий
            for (j = 0; j < m; j++) // Для всіх стовпчиків
                if (a[cur_i][j] == -1)  // Якщо у даному стовпчику даного рядка — ще не пройдена зафарбована клітина
                {
                    a[cur_i][j] = cur_step; // Записуємо довжину шляху до клітини
                    q_i[q_cnt] = cur_i; // Та додаємо її до черги
                    q_j[q_cnt] = j;
                    q_cnt++;
                }
        }
        q_cur++;    // Черговий елемент черги розглянуто
    }

    printf("%d\n", a[i2][j2]);  // Виводимо знайдену довжину найкоротшого шляху (або число -1)

    return 0;
}
