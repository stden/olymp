program Z_A;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, SysUtils
  { you can add units after this };
const
  MaxN=30;
type
  Poliom=array[1..9,1..9]of char;
var
  i,j:longint;
  n:longint;
  c:Poliom;
  forms:array[0..8]of Poliom;
  Ns,Ms:longint;
  a,ans:array[0..2*MaxN+16,0..2*MaxN+16]of char;
  u:array[0..2*MaxN+16,0..2*MaxN+16]of boolean;
  mkol,stkol,p:longint;
Function Hor(a:Poliom):Poliom;
var
  i,j:longint;
Begin
  fillchar(result,sizeof(result),0);
  for i:=1 to n do
    for j:=1 to n do
      result[n-i+1][j]:=a[i][j];
End;
Function Ver(a:Poliom):Poliom;
var
  i,j:longint;
Begin
  fillchar(result,sizeof(result),0);
  for i:=1 to n do
    for j:=1 to n do
      result[i][n-j+1]:=a[i][j];
End;
Function Rot(a:Poliom):Poliom;
var
  x,y,vx,vy:extended;
  i,j:longint;
Begin
  fillchar(result,sizeof(result),0);
  x:=n/2;
  y:=n/2;
  for i:=1 to n do
    for j:=1 to n do begin
      vx:=(i-0.5)-x;
      vy:=(j-0.5)-y;
      result[round(x+vy+0.5)][round(y-vx+0.5)]:=a[i][j];
    end;
End;
Function Can(k,x,y:longint):boolean;
var
  i,j:longint;
Begin
  result:=false;
  for i:=1 to n do
    for j:=1 to n do if forms[k][i][j]<>'.' then
      if a[x+i-1][y+j-1]<>'.' then exit;
  result:=true;
End;
Function DFS(x,y:longint):longint;
Begin
  result:=1;
  u[x][y]:=true;
  if (a[x-1][y]<>'.')and(not u[x-1][y]) then inc(result,DFS(x-1,y));
  if (a[x+1][y]<>'.')and(not u[x+1][y]) then inc(result,DFS(x+1,y));
  if (a[x][y-1]<>'.')and(not u[x][y-1]) then inc(result,DFS(x,y-1));
  if (a[x][y+1]<>'.')and(not u[x][y+1]) then inc(result,DFS(x,y+1));
End;
Function Good(k:longint):boolean;
Begin
  result:=false;
  fillchar(u,sizeof(u),0);
  for i:=1 to MaxN do
    for j:=1 to MaxN do if (a[i][j]<>'.') then
      if DFS(i,j)<>k*n then exit else begin
        result:=true;
        exit;
      end;
  result:=true;
End;
Procedure Perebor(x,y,k,rN,rM,add:longint);
var
  i,kx,ky,nn,nm,p,q:longint;
  ok:boolean;
Begin
  if (x>MaxN) then begin
    x:=1;
    inc(y);
  end;
  if (y>MaxN)or(rN>=MaxN)or(rM>=MaxN) then exit;
  if (k>mkol) then exit;
  if (rN=rM)and(rN>0)and(k<mkol)and(Good(k)) then begin
    mkol:=k;
    Ns:=rN;
    Ms:=rM;
    ans:=a;
  end;
  for i:=1 to 8 do begin
    if Can(i,x,y) then begin
      for kx:=1 to n do
        for ky:=1 to n do
          if (forms[i][kx][ky]<>'.') then begin
            p:=x+kx-1;
            q:=y+ky-1;
            a[p][q]:=chr(ord(forms[i][kx][ky])+add);
          end;
      nn:=rN;
      nm:=rM;
      for kx:=rN+1 to MaxN do begin
        ok:=true;
        for ky:=1 to MaxN do if a[kx][ky]<>'.' then begin
          ok:=false;
          break;
        end;
        nn:=kx;
        if ok then break;
      end;
      for ky:=rM+1 to MaxN do begin
        ok:=true;
        for kx:=1 to MaxN do if a[kx][ky]<>'.' then begin
          ok:=false;
          break;
        end;
        nm:=ky;
        if ok then break;
      end;
      Perebor(x+1,y,k+1,nn-1,nm-1,(add+1)mod 20);
      for kx:=1 to n do
        for ky:=1 to n do
          if (forms[i][kx][ky]<>'.') then
            a[x+kx-1][y+ky-1]:='.';
    end;
  end;

End;
Procedure MakeAns();
Begin
  for i:=1 to Ns do
    for j:=1 to Ms do if ans[i][j]<>'.' then
      ans[2*Ns-i+1][j]:=chr(ord(ans[i][j])+1);
  for i:=1 to 2*Ns do
    for j:=1 to Ms do if ans[i][j]<>'.' then
      ans[i][2*Ms-j+1]:=chr(ord(ans[i][j])+1);
End;
begin
  assign(input,'baiocchi.in');
  reset(input);
  assign(output,'hands.out');
  rewrite(output);
  while not(eof) do begin
    readln(n,stkol);
    for p:=1 to stkol do begin
  for i:=1 to n do begin
    for j:=1 to n do
      read(c[i][j]);
    readln;
   end;
  for i:=0 to MaxN+1 do
    for j:=0 to MaxN+1 do
      a[i][j]:='.';
  forms[1]:=c;
  forms[2]:=Ver(c);
  forms[3]:=Hor(c);
  forms[4]:=Rot(c);
  forms[5]:=Rot(forms[2]);
  forms[6]:=Rot(forms[3]);
  forms[7]:=Rot(forms[4]);
  forms[8]:=Rot(forms[7]);
  mkol:=10;
    ns:=0;
    ms:=0;
    Perebor(1,1,0,0,0,0);
    if mkol*n<>ns*ms then begin
      MakeAns();
      ns:=2*ns;
      ms:=2*ms;
    end;
    for i:=1 to ns do begin
      for j:=1 to ms do write(ans[i][j]);
      writeln('');
    end;
    if ns<>0 then writeln('');
    end;
  end;
  close(output);
end.

