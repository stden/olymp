{$M 59000000,0,1000000}
type tlong=array[0..100]of longint;
const blank:set of char=[#10,#13,#26];
var q:longint;
function eq(a,b:tlong):integer;
var i:longint;
begin
  if a[0]<b[0] then
    eq:=-1;
  if a[0]>b[0] then
    eq:=1;
  if a[0]=b[0] then
  begin
    eq:=0;
    for i:=1 to a[0] do
    begin
      if a[i]<b[i] then
      begin
        eq:=-1;
        exit;
      end;
      if a[i]>b[i] then
      begin
        eq:=1;
        exit;
      end;
    end;
  end;
end;

procedure sub(a,b:tlong;var c:tlong);
var ja,jb,i,tt:longint;
    t:tlong;
begin
  fillchar(t,sizeof(t),0);
  for i:=0 to a[0]-1 do
  begin
    ja:=a[0]-i;
    jb:=b[0]-i;
    if jb<1 then
      jb:=b[0]+1;
    if a[ja]>=b[jb] then
      t[i+1]:=a[ja]-b[jb]
                   else
      begin
        t[i+1]:=a[ja]-b[jb]+10;
        a[ja-1]:=a[ja-1]-1;
      end;
  end;
  c:=t;
  c[0]:=a[0];
  while (c[c[0]]=0)and(c[0]>1) do
    dec(c[0]);
  for i:=1 to c[0] div 2 do
  begin
    tt:=c[i];
    c[i]:=c[c[0]-i+1];
    c[c[0]-i+1]:=tt;
  end;
end;

procedure mul(a,b:tlong;var c:tlong);
var i,j,tt:longint;
    t:tlong;
begin
  fillchar(t,sizeof(t),0);
  for i:=a[0] downto 1 do
    for j:=b[0] downto 1 do
    begin
      t[a[0]-i+b[0]-j+1]:=t[a[0]-i+b[0]-j+1]+a[i]*b[j];
      t[a[0]-i+b[0]-j+2]:=t[a[0]-i+b[0]-j+2]+t[a[0]-i+b[0]-j+1] div 10;
      t[a[0]-i+b[0]-j+1]:=t[a[0]-i+b[0]-j+1] mod 10;
    end;
  t[0]:=a[0]+b[0]+1;
  while (t[t[0]]=0)and(t[0]>1) do
    dec(t[0]);
  c:=t;
  for i:=1 to c[0] div 2 do
  begin
    tt:=c[i];
    c[i]:=c[c[0]-i+1];
    c[c[0]-i+1]:=tt;
  end;
end;

function _div(a,b:tlong;var c:tlong):longint;
var t:longint;
begin
  t:=0;
  while eq(a,b)>=0 do
  begin
    inc(t);
    sub(a,b,a);
  end;
  if (a[1]=0)and(a[0]=1) then
    a[0]:=0;
  _div:=t;
  c:=a;
end;

function nod(a,b:tlong):tlong;
var c:tlong;
begin
  if a[0]=0 then
  begin
    nod:=b;
    exit;
  end;
  _div(b,a,c);
  nod:=nod(c,a);
end;

procedure add(var a1,b1:tlong;a2,b2:tlong);
var m2,t,nd,b3,m1,nok,cur:tlong;
    tt,ja,jb,i,j:longint;

function max(a,b:longint):longint;
begin
  max:=byte(a>b)*a+byte(a<=b)*b;
end;

begin
  if (a1[0]=0)or(a1[0]=1)and(a1[1]=0) then
  begin
    a1:=a2;
    b1:=b2;
    exit;
  end;
  if (a2[0]=0)or(a2[0]=1)and(a2[1]=0) then
    exit;
  nd:=nod(b1,b2);
  mul(b1,b2,b3);
  j:=0;
  cur[0]:=0;
  while eq(cur,nd)=-1 do
  begin
    inc(j);
    inc(cur[0]);
    cur[cur[0]]:=b3[j];
  end;
  while j<=b3[0] do
  begin
    inc(nok[0]);
    nok[nok[0]]:=_div(cur,nd,cur);
    while eq(cur,nd)=-1 do
    begin
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=b3[j];
      if j=b3[0] then
        break;
    end;
  end;
  j:=0;
  cur[0]:=0;
  while eq(cur,b1)=-1 do
  begin
    inc(j);
    inc(cur[0]);
    cur[cur[0]]:=nok[j];
  end;
  while j<=nok[0] do
  begin
    inc(m1[0]);
    m1[m1[0]]:=_div(cur,b1,cur);
    while eq(cur,b1)=-1 do
    begin
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=nok[j];
      if j=nok[0] then
        break;
    end;
  end;
  j:=0;
  cur[0]:=0;
  while eq(cur,b2)=-1 do
  begin
    inc(j);
    inc(cur[0]);
    cur[cur[0]]:=nok[j];
  end;
  while j<=nok[0] do
  begin
    inc(m2[0]);
    m2[m2[0]]:=_div(cur,b2,cur);
    while eq(cur,b2)=-1 do
    begin
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=nok[j];
      if j=nok[0] then
        break;
    end;
  end;
  b1:=nok;
  mul(a1,m1,a1);
  mul(a2,m2,a2);
  fillchar(t,sizeof(t),0);
  for i:=0 to max(a1[0],a2[0]) do
  begin
    ja:=a1[0]-i;
    jb:=a2[0]-i;
    if ja<1 then
      ja:=a1[0]+1;
    if jb<1 then
      jb:=a2[0]+1;
    t[i+1]:=t[i+1]+a1[ja]+a2[jb];
    t[i+2]:=t[i+1] div 10;
    t[i+1]:=t[i+1] mod 10;
  end;
  t[0]:=max(a1[0],a2[0])+1;
  while t[t[0]]=0 do
    dec(t[0]);
  for i:=1 to t[0] div 2 do
  begin
    tt:=t[i];
    t[i]:=t[t[0]-i+1];
    t[t[0]-i+1]:=tt;
  end;
  a1:=t;
end;

procedure readnum(var a,b,c:tlong);
var cc:char;
label 1;
begin
  a[0]:=0;
  b[0]:=0;
  c[0]:=0;
  read(cc);
  while (cc<>'.')and not (cc in blank) do
  begin
    inc(a[0]);
    a[a[0]]:=byte(cc)-48;
    read(cc);
  end;
  if cc in blank then
    goto 1;
  read(cc);
  while (cc<>'(')and not (cc in blank) do
  begin
    inc(b[0]);
    b[b[0]]:=byte(cc)-48;
    read(cc);
  end;
  if cc in blank then
    goto 1;
  read(cc);
  while cc<>')' do
  begin
    inc(c[0]);
    c[c[0]]:=byte(cc)-48;
    read(cc);
  end;
1:
  readln;
end;

procedure sokr(var a,b:tlong);
var cur,t,nd:tlong;
    j:longint;
begin
  nd:=nod(a,b);
  if (nd[0]>1)or(nd[1]>1) then
  begin
    j:=0;
    cur[0]:=0;
    t[0]:=0;
    while eq(cur,nd)=-1 do
    begin
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=a[j];
    end;
    while j<=a[0] do
    begin
      inc(t[0]);
      t[t[0]]:=_div(cur,nd,cur);
      while eq(cur,nd)=-1 do
      begin
        inc(j);
        inc(cur[0]);
        cur[cur[0]]:=a[j];
      end;
    end;
    a:=t;
    j:=0;
    cur[0]:=0;
    t[0]:=0;
    while eq(cur,nd)=-1 do
    begin
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=b[j];
    end;
    while j<=b[0] do
    begin
      inc(t[0]);
      t[t[0]]:=_div(cur,nd,cur);
      while eq(cur,nd)=-1 do
      begin
        inc(j);
        inc(cur[0]);
        cur[cur[0]]:=b[j];
      end;
    end;
    b:=t;
  end;
end;

var bb,p,cur,c,t,a1,b1,c1,a2,b2,c2,d1,f1,d2,f2:tlong;
    j,predper,s2,s5,a,i:longint;

begin
  assign(input,'divide.in');
  reset(input);
  readnum(a1,b1,c1);
  readnum(a2,b2,c2);
  close(input);
  for i:=1 to c1[0] do
    d1[i]:=9;
  d1[0]:=c1[0];
  d1[0]:=d1[0]+b1[0];
  sokr(c1,d1);
  t[0]:=1;
  t[1]:=1;
  add(c1,d1,a1,t);
  f1[1]:=1;
  f1[0]:=b1[0]+1;
  add(c1,d1,b1,f1);
  for i:=1 to c2[0] do
    d2[i]:=9;
  d2[0]:=c2[0];
  d2[0]:=d2[0]+b2[0];
  sokr(c2,d2);
  t[0]:=1;
  t[1]:=1;
  add(c2,d2,a2,t);
  f2[1]:=1;
  f2[0]:=b2[0]+1;
  add(c2,d2,b2,f2);
  a1:=c1;
  b1:=d1;
  a2:=c2;
  b2:=d2;
  mul(a1,b2,a1);
  mul(b1,a2,b1);
  sokr(a1,b1);
  bb:=b1;
  c[0]:=1;
  c[1]:=2;
  t[0]:=0;
  while bb[bb[0]] mod 2=0 do
  begin
    j:=1;
    cur[0]:=1;
    cur[1]:=bb[1];
    while j<=bb[0] do
    begin
      inc(t[0]);
      t[t[0]]:=_div(cur,c,cur);
      while eq(cur,c)=-1 do
      begin
        inc(j);
        inc(cur[0]);
        cur[cur[0]]:=bb[j];
        if j=bb[0] then
          break;
      end;
    end;
    s2:=s2+1;
    bb:=t;
  end;
  bb:=b1;
  c[0]:=1;
  c[1]:=5;
  t[0]:=0;
  while bb[bb[0]] mod 5=0 do
  begin
    j:=0;
    cur[0]:=1;
    cur[1]:=bb[1];
    while j<=bb[0] do
    begin
      inc(t[0]);
      t[t[0]]:=_div(cur,c,cur);
      while eq(cur,c)=-1 do
      begin
        inc(j);
        inc(cur[0]);
        cur[cur[0]]:=bb[j];
        if j=bb[0] then
          break;
      end;
    end;
    s2:=s2+1;
    bb:=t;
  end;
  sokr(c1,d1);
  sokr(c2,d2);
  predper:=s2;
  if s5>s2 then
    predper:=s5;
  assign(output,'divide.out');
  rewrite(output);
  a:=0;
  while eq(a1,b1)>=0 do
  begin
    sub(a1,b1,a1);
    inc(a);
  end;
  write(a);
  if (a1[0]>0)and(not(a1[1]=0)and(a1[0]=1)) then
  begin
    write('.');
    for j:=1 to b1[0] do
    begin
      cur[0]:=j;
      cur[j]:=a1[j];
      if j>a1[0] then
        write(0);
    end;
    j:=b1[0];
    for i:=1 to predper do
    begin
      q:=0;
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=a1[j];
      a:=_div(cur,b1,cur);
      write(a);
    end;
    if cur[0]>0 then
    begin
      write('(');
      inc(j);
      inc(cur[0]);
      cur[cur[0]]:=a1[j];
      a:=_div(cur,b1,p);
      write(a);
      cur:=p;
      repeat
        q:=0;
        inc(j);
        inc(cur[0]);
        cur[cur[0]]:=a1[j];
        a:=_div(cur,b1,cur);
        if eq(cur,p)<>0 then
          write(a);
      until eq(cur,p)=0;
      write(')');
    end;
  end;
  close(output);
end.

